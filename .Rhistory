for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"),
pch = c("o", "o", NULL))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1)
map
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "darkgreen"
} else if (class[i] == "rather steep downhill"){
col[i] <- "forestgreen"
} else if (class[i] == "downhill"){
col[i] <- "lightgreen"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1)
map
?markerOptions
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "darkgreen"
} else if (class[i] == "rather steep downhill"){
col[i] <- "forestgreen"
} else if (class[i] == "downhill"){
col[i] <- "lightgreen"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1,
options = markerOptions(title = "Start Point"))
map
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "darkgreen"
} else if (class[i] == "rather steep downhill"){
col[i] <- "forestgreen"
} else if (class[i] == "downhill"){
col[i] <- "lightgreen"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1,
options = markerOptions(title = "Start Point", riseOnHover = TRUE))
map
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "darkgreen"
} else if (class[i] == "rather steep downhill"){
col[i] <- "forestgreen"
} else if (class[i] == "downhill"){
col[i] <- "lightgreen"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1,
markerOptions(title = "Start Point", riseOnHover = TRUE))
map
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1,
options = markerOptions(title = "Start Point", riseOnHover = TRUE))
map
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "darkgreen"
} else if (class[i] == "rather steep downhill"){
col[i] <- "forestgreen"
} else if (class[i] == "downhill"){
col[i] <- "lightgreen"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col, opacity = 0.8)
}
map <- addLegend(map, position = "bottomright",
colors = c("cyan", "blue", "------------------------", "darkgreen", "forestgreen", "lightgreen",
"gray", "yellow", "orange", "red"),
title = "Legend",
labels = c("start point", "destination", "------------------------", "steep downhill", "rather steep downhill", "downhill",
"flat terrain", "uphill", "rather steep uphill", "steep uphill"))
file <- "plot.svg"
content1 <- paste0("<img src =", file, ">")
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[nrow(lon_lat),1]),
lat = as.numeric(lon_lat[nrow(lon_lat),2]), popup = content1, color = "blue", opacity = 1)
file2 <- readChar("Output/details.txt", file.info("Output/details.txt")$size)
content2 <- paste("End point: ","The toughness of this route is:", round(sum(tough), digits = 3))
map <- addCircleMarkers(map, lng = as.numeric(lon_lat[1,1]), lat = as.numeric(lon_lat[1,2]),
popup = file2, color = "cyan", opacity = 1)
map
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 50, 50)
loc <- create_osmar(ext)
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 5000, 5000)
loc <- create_osmar(ext)
source("Rfunctions/create_osmar.R")
source("Rfunctions/create_osmar.R")
source("Rfunctions/create_osmar.R")
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 50, 50)
loc <- create_osmar(ext)
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 5000, 5000)
loc <- create_osmar(ext)
source("Rfunctions/create_osmar.R")
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/create_osmar.R")
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 50, 50)
loc <- create_osmar(ext)
loc
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 5000, 5000)
loc <- create_osmar(ext)
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 50, 50)
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
ext
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 5000, 5000)
loc <- create_osmar(ext)
source("Rfunctions/setBaseOSM.R")
loc <- create_osmar(ext)
source("Rfunctions/packageloader.R")
source("Rfunctions/findRoute.R")
packages <- c("osmar", "rgdal", "raster", "igraph", "leaflet",
"htmlwidgets", "rmarkdown")
packageloader(packages)
source("Rfunctions/packageloader.R")
packageloader(packages)
ahn <- cropAlt(ext)
ageloader.R")
source("Rfunctions/cropAlt.
source("Rfunctions/packageloader.R")
source("Rfunctions/cropAlt.R")
packages <- c("osmar", "rgdal", "raster", "igraph", "leaflet",
"htmlwidgets", "rmarkdown")
packageloader(packages)
drc <- c("Data", "Output")
for (i in drc){
if (!file.exists(i)){
dir.create(i)
}
}
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 5000, 5000)
ahn <- cropAlt(ext)
start <- c(50.862062, 5.833501)
destination <- c(50.865743, 5.832180)
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 1500, 1500)
ahn <- cropAlt(ext)
getwd()
source("Rfunctions/cropAlt.R")
ahn <- cropAlt(ext)
nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")
nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")
nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")
nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data", method = "wget")
?getData
tryCatch({nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")}, error = function(e){ nedW <- raster("Data/srtm_37_02.tif")})
tryCatch({nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")}, finally = { nedW <- raster("Data/srtm_37_02.tif")})
plot(nedW)
source("Rfunctions/cropAlt.R")
ahn <- cropAlt(ext)
source("Rfunctions/cropAlt.R")
tryCatch({nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")}, finally = { nedW <- raster("Data/srtm_37_02.tif")})
tryCatch({nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")}, finally = { nedW <- raster("Data/srtm_37_02.tif")})
tryCatch({nedW <- getData('SRTM', lon = 4, lat = 51, path = "Data")}, finally = { nedW <- raster("Data/srtm_37_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, finally = { nedE <- raster("Data/srtm_38_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, error = function { nedE <- raster("Data/srtm_38_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, error = function(e) { nedE <- raster("Data/srtm_38_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, error = function(e) { nedE <- raster("Data/srtm_38_02.tif")}, finally={return(nedE)})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, finally { nedE <- raster("Data/srtm_38_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, finally = { nedE <- raster("Data/srtm_38_02.tif")})
tryCatch({nedE <- getData('SRTM', lon = 5, lat = 51, path = "Data")}, error = function(e){message("error")},finally = { nedE <- raster("Data/srtm_38_02.tif")})
#####################################
### How tough is a cycling route? ###
###                               ###
###       Team Wij doen MEE       ###
### Rik van Heumen & Dillen Bruil ###
###                               ###
###    GeoScripting - GRS30806    ###
###        Period 3 - 2017        ###
#####################################
### IMPORTANT NOTE! PLEASE RUN SECTION 2 BEFORE RUNNING SECTIONS 3 AND 4.
### SECTION 2 MIGHT REQUIRE AN INPUT, IN CASE OF NO RESPONSE, THE SCRIPT MIGHT NOT CONTINUE TO RUN
### Section 1: Set up -------------------------------------------------------------------------------------------------
## Route path
# Please select two points that are relatively close to eachother
# Lat/lon of the startpoint of your route as a vector
start <- c(50.862062, 5.833501)
# Lat/lon of the destination point of your route as a vector
destination <- c(50.865743, 5.832180)
## Load functions
source("Rfunctions/packageloader.R")
source("Rfunctions/cropAlt.R")
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/create_osmar.R")
source("Rfunctions/findRoute.R")
source("Rfunctions/routeDetails.R")
source("Rfunctions/CalculateAltitude.R")
source("Rfunctions/nodeDiff.R")
source("Rfunctions/toughness.R")
source("Rfunctions/define_classes.R")
source("Rfunctions/writeDetails.R")
source("Rfunctions/leaflet.R")
## Load packages
packages <- c("osmar", "rgdal", "raster", "igraph", "leaflet",
"htmlwidgets", "rmarkdown")
packageloader(packages)
## Create needed directories
drc <- c("Data", "Output")
for (i in drc){
if (!file.exists(i)){
dir.create(i)
}
}
## Load data
# Center coordinates and width and height of the bounding box:
# Center coordinates are extracted from the start and destination point
ext <- c((start[1]+destination[1])/2, (start[2]+destination[2])/2, 1500, 1500)
# Download and create height map
ahn <- cropAlt(ext)
### Section 2: Osmar object -------------------------------------------------------------------------------------------
# Create an osmar object
loc <- create_osmar(ext)
### Section 3: Route delivery -----------------------------------------------------------------------------------------
# Find shortest route
route <- findRoute(start[1],start[2], destination[1], destination[2])
# Create dataframe with the route details
route_details <- routeDetails(route)
# Make a spatial point data frame from the route
route_points <- as_sp(route, "points")
# Extract altitude from the nodes
alt <- altitude(route_points)
route_details$alt <- alt
# Calculate the altitude difference between nodes and the total height difference
vdist <- nodeDiff(alt)
# Calculate the toughness
tough <- toughness(vdist, route_details$dist)
# Define classes
class <- classes(tough)
### Section 4: Output -------------------------------------------------------------------------------------------------
# Make output file with route details
writeDetails()
# Plot altitude to svg file
svg(filename = "plot.svg",
width = 5,
height = 4)
plot(route_details$cdist, route_details$alt, type = "l", main = "Altitude vs the distance",
xlab = "distance (m)", ylab = "altitude (m)")
grid(col = "gray")
dev.off()
file.copy(from = "plot.svg", to = "Output/plot.svg")
file.remove("plot.svg")
# Plot the route and add the route details and plot to the markers
leafletmap <- plot_leaflet(route_points)
saveWidget(leafletmap, file = "route.html")
file.copy(from = "route.html", to = "Output/route.html")
file.remove("route.html")
# Automatically open the html file in a browser
browseURL(file.path("Output/route.html"))
