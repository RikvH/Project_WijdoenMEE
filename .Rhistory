tough
plot(nedCrop)
plot(route_points, add=T)
#####################################
### How tough is a cycling route? ###
###                               ###
###       Team Wij doen MEE       ###
### Rik van Heumen & Dillen Bruil ###
###                               ###
###    GeoScripting - GRS30806    ###
###        Period 3 - 2017        ###
#####################################
rm(list=ls())
## Load functions
source("Rfunctions/packageloader.R")
source("Rfunctions/cropAlt.R")
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/findRoute2.R")
source("Rfunctions/routeDetails.R")
source("Rfunctions/CalculateAltitude.R")
source("Rfunctions/nodeDiff.R")
source("Rfunctions/toughness.R")
## Load packages
packages <- c("osmar", "rgdal", "raster", "igraph")
packageloader(packages)
## Load data
# Center coordinates:
ext <- c(50.861065, 5.833611)
# Create height map
nedCrop <- cropAlt(ext)
## General Part
loc <- setBaseOSM(ext)
# Find shortest route
#route <- findRoute("Gosewijnstraat", "Neerhem")
route <- findRoute(50.862062, 5.833501, 50.865743, 5.832180)
# Create dataframe with the route details
route_details <- routeDetails(route)
# Make a spatial point data frame from the route
route_points <- as_sp(route, "points")
# Extract altitude from the nodes
alt <- altitude(route_points)
# Calculate the total difference
vdist <- nodeDiff(alt)
sum(vdist)
# Calculate the toughness
tough <- toughness(vdist, route_details$dist)
tough
plot(nedCrop)
plot(route_points, add=T)
View(route_details)
#####################################
### How tough is a cycling route? ###
###                               ###
###       Team Wij doen MEE       ###
### Rik van Heumen & Dillen Bruil ###
###                               ###
###    GeoScripting - GRS30806    ###
###        Period 3 - 2017        ###
#####################################
#rm(list=ls())
### IMPORTANT NOTE! PLEASE RUN SECTION 2 BEFORE RUNNING SECTIONS 3 AND 4.
### SECTION 2 REQUIRES AN INPUT, IN CASE OF NO RESPONSE, THE SCRIPT WILL NOT CONTINUE TO RUN
### Section 1: Set up -------------------------------------------------------------------------------------------------
## Load functions
source("Rfunctions/packageloader.R")
source("Rfunctions/cropAlt.R")
source("Rfunctions/setBaseOSM.R")
source("Rfunctions/create_osmar.R")
source("Rfunctions/findRoute.R")
source("Rfunctions/routeDetails.R")
source("Rfunctions/CalculateAltitude.R")
source("Rfunctions/nodeDiff.R")
source("Rfunctions/toughness.R")
source("Rfunctions/define_classes.R")
source("Rfunctions/leaflet.R")
## Load packages
packages <- c("osmar", "rgdal", "raster", "igraph", "leaflet")
packageloader(packages)
## Load data
# Center coordinates and width and height of the bounding box:
ext <- c(50.861065, 5.833611, 1500, 1500)
# Download and create height map
#ahn <- download_ahn(ext)
ahn <- cropAlt(ext)
### Section 2: Osmar object -------------------------------------------------------------------------------------------
# Create an osmar object
loc <- create_osmar(ext)
### Section 3: Route delivery -----------------------------------------------------------------------------------------
# Find shortest route
route <- findRoute(50.862062, 5.833501, 50.865743, 5.832180)
# Create dataframe with the route details
route_details <- routeDetails(route)
# Make a spatial point data frame from the route
route_points <- as_sp(route, "points")
# Extract altitude from the nodes
alt <- altitude(route_points)
route_details$alt <- alt
# Calculate the altitude difference between nodes and the total height difference
vdist <- nodeDiff(alt)
sum(vdist)
### Section 4: Output -------------------------------------------------------------------------------------------------
# Plot altitude
plot(route_details$cdist, route_details$alt, type = "line", main = "Altitude vs the distance",
xlab = "distance (m)", ylab = "altitude (m)")
grid(col = "gray")
# Calculate the toughness
tough <- toughness(vdist, route_details$dist)
tough
# Define classes
class <- classes(tough)
class
tough_class <- cbind(tough, class)
# Plot the route
leafletmap <- plot_leaflet(route_points)
leafletmap
# Plot the route
leafletmap <- plot_leaflet(route_points)
leafletmap
tough
source("Rfunctions/leaflet.R")
# Plot the route
leafletmap <- plot_leaflet(route_points)
leafletmap
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
lon_lat <- cbind(lon_lat, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col)
}
map
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
lon_lat <- cbind(lon_lat, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col)
}
View(lon_lat)
class
col = c()
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
col = c()
for (i in class){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
col = c(NULL)
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
col
class
lon_lat <- cbind(lon_lat,class, col)
View(lon_lat)
class <- c(NULL)
for (i in 1:length(tough)) {
if (tough[i] == 0){
class[i] <- "flat terrain"
} else if (tough[i] > -0.1 & tough[i] < 0){
class[i] <- "downhill"
} else if (tough[i] > -0.3 & tough[i] < 0){
class[i] <- "rather steep downhill"
} else if (tough[i] < -0.3){
class[i] <- "steep downhill"
} else if (tough[i] < 0.1){
class[i] <- "uphill"
} else if (tough[i] < 0.3){
class[i] <- "rather steep uphill"
} else{
class[i] <- "steep uphill"
}
}
source("Rfunctions/define_classes.R")
source("Rfunctions/leaflet.R")
class <- classes(tough)
class
tough_class <- cbind(tough, class)
leafletmap <- plot_leaflet(route_points)
leafletmap
lon_lat <- route_points@coords[,1:2]
#Color
col = c(NULL)
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "dowhnill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
class
lon_lat <- route_points@coords[,1:2]
col = c(NULL)
for (i in 1:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "downhill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else{
col[i+1] <- "red"
}
}
class <- c(NULL)
for (i in 1:length(tough)) {
if (tough[i] == 0){
class[i+1] <- "flat terrain"
} else if (tough[i] > -0.1 & tough[i] < 0){
class[i+1] <- "downhill"
} else if (tough[i] > -0.3 & tough[i] < 0){
class[i+1] <- "rather steep downhill"
} else if (tough[i] < -0.3){
class[i+1] <- "steep downhill"
} else if (tough[i] < 0.1){
class[i+1] <- "uphill"
} else if (tough[i] < 0.3){
class[i+1] <- "rather steep uphill"
} else{
class[i+1] <- "steep uphill"
}
}
return(class)
source("Rfunctions/define_classes.R")
class <- classes(tough)
class
tough_class <- cbind(tough, class)
View(tough_class)
lon_lat <- route_points@coords[,1:2]
#Color
col = c(NULL)
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "downhill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else {
col[i+1] <- "red"
}
}
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "downhill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else {
col[i+1] <- "red"
}
}
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "downhill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else {
col[i+1] <- "red"
}
}
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i+1] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i+1] <- "green"
} else if (class[i] == "downhill"){
col[i+1] <- "blue"
} else if (class[i] == "flat terrain"){
col[i+1] <- "gray"
} else if (class[i] == "uphill"){
col[i+1] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i+1] <- "orange"
} else {
col[i+1] <- "red"
}
}
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i] <- "green"
} else if (class[i] == "downhill"){
col[i] <- "blue"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
lon_lat <- route_points@coords[,1:2]
#Color
col = c()
for (i in 2:length(class)){
if (class[i] == "steep downhill"){
col[i] <- "black"
} else if (class[i] == "rather steep downhill"){
col[i] <- "green"
} else if (class[i] == "downhill"){
col[i] <- "blue"
} else if (class[i] == "flat terrain"){
col[i] <- "gray"
} else if (class[i] == "uphill"){
col[i] <- "yellow"
} else if (class[i] == "rather steep uphill"){
col[i] <- "orange"
} else {
col[i] <- "red"
}
}
lon_lat <- cbind(lon_lat,class, col)
#leaflet
map <- leaflet()
map <- addTiles(map)
for (i in 1:nrow(lon_lat)){
lon1 <- as.numeric(lon_lat[i,1])
lat1 <- as.numeric(lon_lat[i,2])
vector1 <- cbind(lon1, lat1)
if (i < nrow(lon_lat)){
row <- lon_lat[i+1,]
for (j in 1:length(row)){
if (j == 1){
lon2 <- as.numeric(row[j])
} else if (j == 2){
lat2 <- as.numeric(row[j])
} else {
col <- as.character(row[j])
}
}
vector2 <- cbind(lon2, lat2)
}
vector_total <- rbind(vector1, vector2)
map <- addPolylines(map, lng = vector_total[,1], lat = vector_total[,2], col = col)
}
map
leafletmap <- plot_leaflet(route_points)
leafletmap
source("Rfunctions/leaflet.R")
leafletmap <- plot_leaflet(route_points)
leafletmap
